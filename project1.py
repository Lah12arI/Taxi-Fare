# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wmonCYKS55QuP4oA2sOrz_OnTAhxphXh
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import BaggingRegressor
from sklearn.model_selection import GridSearchCV
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv("/content/TaxiFare.csv")

df.head()

df.shape

df.tail()

df.isnull().sum()

df.info()

df.describe()

df.amount.describe()

index_names = df[df["amount"]<2.5].index # we dropped it because the charge of taxi in new york can never be less than 2.5

index_names

df.describe(percentiles = [0.01,.02,.03,.04,.05,.1,.25,.4,.5,.75,.9,.95,.96,.98,.99]).T

df["X1"] = df["latitude_of_pickup"]
df["X2"] = df["latitude_of_dropoff"]
df["Y1"] = df["longitude_of_pickup"]
df["Y2"] = df["longitude_of_dropoff"]

df["Distance_Travel"] = np.sqrt((np.square(df["X1"]-df["X2"]))+(np.square(df["Y1"]-df["Y2"])))

df1=df.drop(columns=["longitude_of_pickup","latitude_of_pickup","longitude_of_dropoff","latitude_of_dropoff"])

df1[["date","Time","Zone"]]=df1["date_time_of_pickup"].str.split(pat=" ",n=-1 , expand=True)
#splitting the date_time_of_pickup in separate columns.

df2 = df1.copy()

df2["amount"] = np.where(df2["amount"]>=52, 52, df2["amount"])
df2["no_of_passenger"] = np.where(df2["no_of_passenger"]>=5, 4, df2["no_of_passenger"])
df2["Distance_Travel"] = np.where(df2["Distance_Travel"]>=0.228218, 0.228218, df2["Distance_Travel"])
#Outlier Treatment

df2.info()

df2["date"] = pd.to_datetime(df2["date"])
df2["date_time_of_pickup"] = pd.to_datetime(df2["date_time_of_pickup"])
#Changig the type from object to datetime.

df2["hours"] = df2["date_time_of_pickup"].dt.hour
df2["min"] = df2["date_time_of_pickup"].dt.minute
df2["second"] = df2["date_time_of_pickup"].dt.second
df2["year"] = df2["date_time_of_pickup"].dt.year
df2["day_of_the_month"] = df2["date_time_of_pickup"].dt.day
#Extracting some features from date_time_of_pickup

def time_of_day(x):
    if x in range(6,12):
        return "Morning"
    elif x in range(12,17):
        return "Afternoon"
    elif x in range(17,21):
        return "Evening"
    else:
        return "Night"

df2["time_of_day"] = df2["hours"].apply(time_of_day)

df2["day"] = df2["date_time_of_pickup"].dt.day_name()
df2["day_no"] = df2["date_time_of_pickup"].dt.weekday

df2 = df2.loc[df2['X1'].between(40, 42)]
df2 = df2.loc[df2['Y1'].between(-75, -72)]
df2 = df2.loc[df2['X2'].between(40, 42)]
df2 = df2.loc[df2['Y2'].between(-75, -72)]
print(f'New number of observations: {df2.shape[0]}')

df.describe(include="all")

latitude=45.67466544
longitude=54.655472423

#MINUMUM AND MAXIMUM OF LONGITUDE TEST
print(min(df["longitude_of_pickup"].min(),df["longitude_of_dropoff"].min()))

print(max(df["longitude_of_pickup"].max(),df["longitude_of_dropoff"].min()))

len(df)

#MINIMUM AND MAXIMUM TEST OF LATITUDE TEST
print(min(df["latitude_of_pickup"].min(), df["latitude_of_dropoff"].min()))

print(max(df['latitude_of_pickup'].max(),df['latitude_of_dropoff'].min()))

df.head(20).style.background_gradient(cmap="Oranges")

sns.countplot(x="amount",data=df)

sns.countplot(x="no_of_passenger",data=df,palette="Paired")

sns.countplot(x="no_of_passenger",hue="amount",data=df)

df.hist(figsize=(10,15))
plt.show()

plt.figure(figsize=(10,10))
sns.boxplot(x="no_of_passenger",y="amount",data=df)

df.boxplot(column=["no_of_passenger"])
def remove_outlier(col):
    sorted(col)
    Q1,Q3=col.quantile([0.25,0.75])
    IQR=Q3-Q1
    lower_range=Q1-1.5*IQR
    upper_range=Q3+1.5*IQR
    return lower_range,upper_range

low_no_of_passenger,high_no_of_passenger=remove_outlier(df["no_of_passenger"])
df["no_of_passenger"]=np.where(df["no_of_passenger"]>high_no_of_passenger,high_no_of_passenger,df["no_of_passenger"])
df["no_of_passenger"]=np.where(df["no_of_passenger"]<low_no_of_passenger,low_no_of_passenger,df["no_of_passenger"])

df.boxplot(column=["no_of_passenger"])



corr=df.corr()
corr

plt.figure(figsize=(18,18))
sns.heatmap(corr,annot=True)
plt.show()

sns.pairplot(df,diag_kind='kde')
plt.show()

plt.figure(figsize = (10, 6),facecolor="pink")
sns.distplot(df['amount']);
plt.title('Distribution of Fare')
plt.grid()
plt.savefig('Distribution of Fare.jpg')

x=x.apply(pd.to_numeric,errors='coerce')
y=y.apply(pd.to_numeric,errors='coerce')

x.fillna(0,inplace=True)
y.fillna(0,inplace=True)

x=df.drop(['amount'],axis=1)
y=df[['amount']]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

model_lrc = LinearRegression()
model_lrc.fit(x_train,y_train)

model_lrc.score(x_train,y_train)

model_lrc.score(x_test,y_test)

dtree=DecisionTreeRegressor()
dtree=dtree.fit(x_train,y_train)

dtree.score(x_train,y_train)

from sklearn.ensemble import BaggingRegressor
bgr=BaggingRegressor(n_estimators=150,base_estimator=dtree,random_state=0)
bgr=bgr.fit(x_train,y_train)
y_predict=bgr.predict(x_test)
print(bgr.score(x_train,y_train))

from sklearn.ensemble import BaggingRegressor
bgr=BaggingRegressor(n_estimators=170,base_estimator=dtree,random_state=0)
bgr=bgr.fit(x_train,y_train)
y_predict=bgr.predict(x_test)
print(bgr.score(x_test,y_test))

from sklearn.ensemble import AdaBoostRegressor
abr=AdaBoostRegressor(n_estimators=100,random_state=0)
abr=abr.fit(x_train,y_train)
y_predict=abr.predict(x_test)
print(abr.score(x_test,y_test))

from sklearn.ensemble import AdaBoostRegressor
abr=AdaBoostRegressor(n_estimators=50,random_state=0)
abr=abr.fit(x_train,y_train)
y_predict=abr.predict(x_test)
print(abr.score(x_train,y_train))

from sklearn.ensemble import GradientBoostingRegressor
gbr=GradientBoostingRegressor(n_estimators=100,random_state=0)
gbr=gbr.fit(x_train,y_train)
y_predict=gbr.predict(x_test)
print(gbr.score(x_test,y_test))

from sklearn.ensemble import GradientBoostingRegressor
gbr=GradientBoostingRegressor(n_estimators=40,random_state=0)
gbr=gbr.fit(x_train,y_train)
y_predict=gbr.predict(x_test)
print(gbr.score(x_train,y_train))

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 160, random_state=0,max_features=3)
rfr = rfr.fit(x_train, y_train)
y_predict=rfr.predict(x_test)
print(rfr.score(x_test,y_test))

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 160, random_state=0,max_features=3)
rfr = rfr.fit(x_test, y_test)
y_predict=rfr.predict(x_test)
print(rfr.score(x_train,y_train))

from sklearn.metrics import r2_score

y_predict= abr.predict(x_test)
score = r2_score(y_test, y_predict)
print("The accuracy of our model is {}%".format(round(score, 2) *100))